/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package assignment3;

import org.junit.Test;

import assignment3.Backtracking.BacktrackingSudokuSolver;
import assignment3.Backtracking.BacktrackingSudokuSolverCount;

import static org.junit.Assert.*;

public class BacktrackingSudokuTest {
    @Test
    public void testBacktrackingSudokuSolver() {
        // Should return true
        assertTrue("Should return true", BacktrackingSudokuSolver.backtrackingSudokuSolver(new int[][] { 
            { 0, 1, 0, 0 },
            { 2, 3, 1, 0 },
            { 0, 0, 3, 0 },
            { 0, 0, 0, 0 } }, 1, 1, 2));
        assertTrue("Should return true", BacktrackingSudokuSolver.backtrackingSudokuSolver(new int[][] { 
            { 1, 0, 0, 0 },
            { 0, 2, 0, 0 },
            { 0, 0, 3, 0 },
            { 0, 0, 0, 4 } }, 1, 1, 2));
        assertTrue("Should return true", BacktrackingSudokuSolver.backtrackingSudokuSolver(new int[][] { 
            { 1, 2, 3, 0, 0, 0, 0, 0, 0 },
            { 4, 5, 6, 0, 0, 0, 0, 0, 0 },
            { 7, 8, 9, 0, 0, 0, 0, 0, 0 },
            { 0, 0, 0, 1, 2, 3, 0, 0, 0 },
            { 0, 0, 0, 4, 5, 6, 0, 0, 0 },
            { 0, 0, 0, 7, 8, 9, 0, 0, 0 },
            { 0, 0, 0, 0, 0, 0, 1, 2, 3 },
            { 0, 0, 0, 0, 0, 0, 4, 5, 6 },
            { 0, 0, 0, 0, 0, 0, 7, 8, 9 } }, 1, 1, 3));

        assertFalse("Should return false", BacktrackingSudokuSolver.backtrackingSudokuSolver(new int[][] { 
            { 4, 1, 2, 3 },
            { 2, 3, 1, 4 },
            { 1, 2, 3, 0 },
            { 0, 0, 0, 0 } }, 1, 1, 2));
       
    }

    @Test
    public void testBacktrackingSudokuSolverCount() {
        // Sudoku with 1 solution
        assertEquals(1, BacktrackingSudokuSolverCount.SudokuSolverCount(new int[][] {
            { 0, 1, 0, 0 },
            { 2, 3, 1, 0 },
            { 0, 0, 3, 0 },
            { 0, 0, 0, 0 } }, 1, 1, 2)); 
        BacktrackingSudokuSolverCount.resetCount(); // Reset static counter

        // Sudoku with 1 solution
        assertEquals(1, BacktrackingSudokuSolverCount.SudokuSolverCount(new int[][] {
            { 3, 0, 6, 5, 0, 8, 4, 0, 0 },
            { 5, 2, 0, 0, 0, 0, 0, 0, 0 },
            { 0, 8, 7, 0, 0, 0, 0, 3, 1 },
            { 0, 0, 3, 0, 1, 0, 0, 8, 0 },
            { 9, 0, 0, 8, 6, 3, 0, 0, 5 },
            { 0, 5, 0, 0, 9, 0, 6, 0, 0 },
            { 1, 3, 0, 0, 0, 0, 2, 5, 0 },
            { 0, 0, 0, 0, 0, 0, 0, 7, 4 },
            { 0, 0, 5, 2, 0, 6, 3, 0, 0 } }, 1, 1, 3));
        BacktrackingSudokuSolverCount.resetCount(); // Reset static counter

        // Sudoku with 382 solutions
        assertEquals(382, BacktrackingSudokuSolverCount.SudokuSolverCount(new int[][] {
            { 1, 2, 3, 5, 6, 7, 0, 0, 0 },
            { 4, 5, 6, 0, 0, 0, 0, 0, 0 },
            { 7, 8, 9, 0, 0, 0, 0, 0, 0 },
            { 0, 0, 0, 1, 2, 3, 0, 0, 0 },
            { 0, 0, 0, 4, 5, 6, 0, 0, 0 },
            { 0, 0, 0, 7, 8, 9, 0, 0, 0 },
            { 0, 4, 0, 0, 0, 0, 1, 2, 3 },
            { 0, 0, 1, 0, 0, 0, 4, 5, 6 },
            { 0, 0, 0, 0, 0, 0, 7, 8, 9 } }, 1, 1, 3));
    }
}
